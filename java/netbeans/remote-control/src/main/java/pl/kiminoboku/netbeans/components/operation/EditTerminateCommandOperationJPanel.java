/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.kiminoboku.netbeans.components.operation;

import java.awt.Component;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.validation.ValidationException;
import pl.kiminoboku.emorg.domain.entities.operation.AbstractOperation;
import pl.kiminoboku.emorg.domain.entities.operation.RunCommandOperation;
import pl.kiminoboku.emorg.domain.entities.operation.TerminateCommandOperation;
import pl.kiminoboku.netbeans.ValidateMe;

/**
 *
 * @author Radek
 */
public class EditTerminateCommandOperationJPanel extends javax.swing.JPanel implements OperationCreator<TerminateCommandOperation>, OperationListModelObservator, ValidateMe {

    private TerminateCommandOperation operation = new TerminateCommandOperation();

    private DefaultComboBoxModel<RunCommandOperation> comboBoxModel = new DefaultComboBoxModel<>();

    /**
     * Creates new form EditTerminateCommandOperationJPanel
     */
    public EditTerminateCommandOperationJPanel() {
        initComponents();
        customInit();
        jComboBox1.setModel(comboBoxModel);
    }

    public EditTerminateCommandOperationJPanel(TerminateCommandOperation operation) {
        this();
        this.operation = operation;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EditTerminateCommandOperationJPanel.class, "EditTerminateCommandOperationJPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 130, Short.MAX_VALUE))
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public TerminateCommandOperation createOperation() {
        RunCommandOperation commandToTerminate = comboBoxModel.getElementAt(jComboBox1.getSelectedIndex());
        operation.setCommandToTerminate(commandToTerminate);
        operation.setDescription("Terminate command: " + commandToTerminate.getCommand());

        return operation;
    }

    @Override
    public void setOperationListData(List<AbstractOperation> operations, int newOperationIndex) {
        RunCommandOperation selectedOperation = operation.getCommandToTerminate();
        if (selectedOperation != null) {
            comboBoxModel.addElement(selectedOperation);
        }

        for (int i = 0; i < operations.size(); i++) {
            AbstractOperation searchedOperation = operations.get(i);
            if (searchedOperation instanceof RunCommandOperation && i < newOperationIndex) {
                RunCommandOperation runCommandOperation = (RunCommandOperation) searchedOperation;
                if (runCommandOperation.getTerminateCommandOperation() == null) {
                    comboBoxModel.addElement(runCommandOperation);
                    if (selectedOperation == null) {
                        selectedOperation = runCommandOperation;
                    }
                }
            }
        }

        if (selectedOperation != null) {
            jComboBox1.setSelectedItem(selectedOperation);
        }
    }

    @Override
    public void isDataValid() {
        if (jComboBox1.getSelectedItem() == null) {
            throw new ValidationException("EditTerminateCommandOperationJPanel.youMustChooseCommandToTerminate");
        }
    }

    private void customInit() {
        jComboBox1.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if (value != null) {
                    RunCommandOperation operation = (RunCommandOperation) value;
                    value = "" + operation.getOrderNumber() + ": " + operation.getCommand();
                }
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });
    }
}
